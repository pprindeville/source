#!/bin/sh /etc/rc.common

START=80
USE_PROCD=1

get_free_area() {
	sfdisk -q -F "$1" 2>/dev/null | while read start end sectors size; do
		case $start in
		*"Unpartitioned"* | *"Units:"* | *"Sector"* | *"Start"* )
			continue
			;;
		[0-9]*)
			case "$size" in
				*"M")
					[ "${size%%M}" -lt 100 ] && continue
					;;
				*"G" | *"T")
					;;
				*"k" | *"b")
					continue
					;;
			esac
			echo "$start $end"
			;;
		esac
	done
}

create_extra_part() {
	local disk=$1
	local freepart

	freepart="$(get_free_area $disk)"

	if [ "$freepart" ]; then
		echo "$freepart L" | sfdisk --force -w never -a $disk 2>&1 | while read line; do
			case "$line" in
				*"Created a new partition"*)
					echo -n "PARTDEV="
					echo "$line" | cut -d':' -f1
					;;
				*"signature"*)
					echo -n "FORMATTED="
					echo "$line" | cut -d' ' -f5
					;;
			esac
		done
		partx -a --nr -1:-1 $disk 1>/dev/null 2>/dev/null || true
	fi
}

check_uuid() {
	local cfg="$1"
	local new_uuid="$2"

	config_get uuid "$cfg" uuid
	[ "$new_uuid" = "$uuid" ] && found=1
}

start_service() {
	. /lib/upgrade/common.sh

	local PARTDEV=""
	local FORMATTED=""
	local UUID VERSION TYPE
	local diskdev partdev

	export_bootdevice && export_partdevice diskdev -2 || {
		echo "Unable to determine upgrade device"
		return 1
	}
	eval $(create_extra_part /dev/$diskdev)

	if [ "$PARTDEV" -a -z "$(block info $PARTDEV)" ]; then
		mkfs.ext4 $PARTDEV
	fi

	if [ "$PARTDEV" ]; then
		eval "$(block info $PARTDEV | cut -d':' -f2- | xargs -n 1)"
		config_load fstab
		found=0
		config_foreach check_uuid mount $UUID
		[ "$found" -eq 1 ] && return 0

		uci -q batch <<EOF
add fstab mount
set fstab.@mount[-1].uuid='$UUID'
set fstab.@mount[-1].target='/mnt/$(basename $PARTDEV)'
set fstab.@mount[-1].enabled='1'
commit fstab
EOF
		block mount $PARTDEV
	fi
}
